/*****************************************************************
** Copyright 2008-2010 SDL of GUCAS.		All rights reserved **
**																**
** version 1.0													**
** Date: DEC 30th, 2010		by LiangJixiang						**
**																**
** header	 file for		 feature extraction					**
**																**
******************************************************************/
#include <stdio.h>

#ifndef _FEA_H_
#define _FEA_H_

///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
enum{HAAR,MSO,SURF,HOG,LBP};
//////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////
#define THREHOLD		 5
//////////////////////////////////////////////////////////////////
#define HOG_BINS           9	//v-HOG特征的维数，每个块9个BINs
#define SURF_BINS          4    //求和|dx| 求和|dy| 
#define HAAR_BINS          2    //dx,dy
#define MSO_BINS           2    //dx/(dx*dx+dy*dy),dy/(dx*dx+dy*dy)
//For LBP
#define LBP_BINS           59	//256维直方图
#define BINS               59   //一个Cell的最大BINS
//#define MINCUT			   0.0
//#define MAXCUT			   0.92
//////////////////////////////////////////////////////////////////
//特征结构定义
typedef struct{	
	int   x1,x2,y1,y2       ;	//块特征的位置(左上和右下)
	int   orient            ;   //特征主方向1,对于多尺度的块即是MSO特征
	float fea [BINS]        ;   //块特征向量	
	int   active            ;   //是否有效的标志	
	int   dim               ;   //块特征向量的有效位数和所提取的特征相关
}MSOFea,CellFea;
//////////////////////////////////////////////////////////////////
typedef struct {
	CellFea * cellfea		;	//块特征集
    int  cell_num			;	//特征集中特征块的个数
	int  adjacent_num		;	//归一化时相邻块的个数(2*2 or 3*3 or 4*4)
	int  fea_type			;	//所提特征的类型HOG\MSO\HAAR\SURF
	double weight_sum       ;   //区域内的权值
}FeaSet;

////////////////////////////////////////////////////////////////////////////////////
//特征的操作
////////////////////////////////////////////////////////////////////////////////////
//初始化一个特征(块)
////////////////////////////////////////////////////////////////////////////////////
bool InitiateMSOFea(MSOFea &fea);
////////////////////////////////////////////////////////////////////////////////////
//copy 一个特征
////////////////////////////////////////////////////////////////////////////////////
bool CopyMSOFea(MSOFea &src, MSOFea &tgt);

////////////////////////////////////////////////////////////////////////////////////
//分配和释放feature set
FeaSet* AllocFeaSet(int cell_num, int adjacent, int fea_type);

/////////////////////////////////////////////////////////////////////////////////////
//从固定各式的文件读入feature set,使用完毕也需要释放
FeaSet* ReadFeaSetFromFile(char path[255]);
bool   FreeFeaSet(FeaSet *fea_set);
////////////////////////////////////////////////////////////////////////////////////
//给定一个图像，计算积分图的函数，这个积分图可以是方向等的积分
//img:输入图像的数值
//这里的积分图包括两种积分图:第一种是直接对原图进行的积分图,nBand指的是原图的
//通道数.RGB图像nBand=3对于灰度图nBand=1
//第二种积分图不是对原图直接进行的,而是对"梯度图"求积分图.也就是先对原图
//每个点(pixel)求梯度,再根据所求的特征构造一个"梯度图".
//nBand在这里就与所求的特征有关.
//对于SURF特征nBand=4 /**求和dx,求和dy,求和|dx|,求和|dy|**/
//对于VHOG特征nBand=9 /**0-180度被分成9个bins**/
////////////////////////////////////////////////////////////////////////////////////
bool IntegralImage_char(void *img, long *IntergralImage, int wid, int hei, int nBand);
bool IntegralImage_int(int *img, long *IntergralImage, int wid, int hei, int nBand);

////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////
//计算每个象素的梯度
//根据求解不同的特征,构造不同的"梯度图"
//对于SURF特征构造4通道"梯度图" /* dx, dy, |dx|, |dy| */
//对于VHOG特征构造9通道"梯度图" /* 0-180度分成9个bins 梯度方向对应的bins存放梯度幅值*/
//hog_flag ==0, 提取HOG特征，否则提取SURF特征
//nBand: 图像颜色通道数
//nChannel:梯度方向数目
////////////////////////////////////////////////////////////////////////////////////////////////
int f(int Dx, int Dy);
bool ComputerGradient(unsigned char *img, int nBand, int *gradient, int wid, int hei);

////////////////////////////////////////////////////////////////////////////////////////////////
//在积分图上提取单个块的haar特征
////////////////////////////////////////////////////////////////////////////////////////////////
bool ComputHAARFea(long *IntegralColor, int wid, int hei, MSOFea &fea, int nBand);

////////////////////////////////////////////////////////////////////////////////////////////////
//在积分图上提取单个块的MSO特征
////////////////////////////////////////////////////////////////////////////////////////////////
bool ComputMSOFea(long *IntegralColor, int wid, int hei, MSOFea &fea, int nBand);

////////////////////////////////////////////////////////////////////////////////////////////////
//在积分图上提取单个块的HOG或者SURF特征
////////////////////////////////////////////////////////////////////////////////////////////////
bool ComputHOGFea(long *IntegralGradient, int wid, int hei, MSOFea &fea,int Channel);
bool ComputSURFFea(long *IntegralColor, int wid, int hei, CellFea &fea,int nBand);
////////////////////////////////////////////////////////////////////////////////////////////////
//在积分图上提取多个特征块上的单个特征(HAAR\MSO\SURF\HOG)调用单个块上特征提取函数即可.
////////////////////////////////////////////////////////////////////////////////////////////////
bool ExtractFeaSet(long *IntegralImage, FeaSet &fea_set, int wid, int hei, int Channel);

////////////////////////////////////////////////////////////////////////////////////////////////
//对提取的特征根据块的相邻关系进行归一化4种特征的归一化都可以用这个函数实现.
////////////////////////////////////////////////////////////////////////////////////////////////
bool NormFeaSet(FeaSet &fea_set);

////////////////////////////////////////////////////////////////////////////////////////////////
//按照SVM-lib的格式输出特征
////////////////////////////////////////////////////////////////////////////////////////////////
bool WriteFeaSetBySVMFormat(FeaSet fea_set,char path[255], int label,FILE *fp);
bool AddFeaBySVMFormat(double fea[], int start_index, int add_fea_num,FILE *fp);
////////////////////////////////////////////////////////////////////////////////////////////////
//输出特征位置，特征值
////////////////////////////////////////////////////////////////////////////////////////////////
bool GetWindowFea(FeaSet fea_set, double fea[]);
////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
//for LBP
//////////////////////////////////////////////////////////////////////////////////////////////////
//#include "values.h"
#define M_PI 3.1415926
/* Compare a value pointed to by 'ptr' to the 'center' value and
 * increment pointer. Comparison is made by masking the most
 * significant bit of an integer (the sign) and shifting it to an
 * appropriate position. */
#define compab_mask_inc(ptr,shift) { value |= ((unsigned int)(*center - *ptr - 5) & 0x80000000) >> (31-shift); ptr++; }
/* Predicate 1 for the 3x3 neighborhood */
#define predicate 1
/* The number of bits */
#define bits 8

int ExtractLBPFeaSet(unsigned char* img, FeaSet &fea_set, int columns,int rows);
////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////
#endif
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
//end